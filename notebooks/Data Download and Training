{"cells":[{"cell_type":"code","source":["# Mount Google Drive\n","from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"-7SILn_eeyA0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%run -i '/Users/jmordetsky/My Drive/ml-trde-notebooks/installs.ipynb'"],"metadata":{"id":"qxggHlTcOHBZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%run -i '/Users/jmordetsky/My Drive/ml-trde-notebooks/common.ipynb'"],"metadata":{"id":"I7sDSX3vIzmf"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%run -i '/Users/jmordetsky/My Drive/ml-trde-notebooks/common_gen2.ipynb'"],"metadata":{"id":"RWFAwO30qXdr"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Imports/Globals"],"metadata":{"id":"ziDbcT6RKgo0"}},{"cell_type":"code","source":["import yfinance as yf\n","import pandas as pd\n","import pandas_ta as ta\n","from datetime import datetime, timedelta\n","import requests\n","import time\n","import json as js\n","from sklearn.linear_model import Lasso, Ridge\n","import xgboost as xgb\n","from sklearn.feature_selection import f_regression\n","from sklearn.feature_selection import SelectKBest\n","\n","today = datetime.today()\n","delta60 = today - timedelta(days=60)\n","delta120 = today - timedelta(days=120)\n","data_path = '/Users/jmordetsky/My Drive/ml-trde-notebooks/data'\n","tickers = [\"SPY\", \"TSLA\", \"AAPL\", \"IBM\", \"F\", \"CAT\", \"BAC\", \"B\", \"META\", \"AMZN\", \"XOM\", \"BP\"]\n","coins = [\"FCON-USDT\", \"GMT3L-USDT\", \"NEAR3L-USDT\", \"H2O-USDT\", \"DOGE3L-USDT\", \"DOGE3S-USDT\"]\n","KUCOIN_REST_API = \"https://api.kucoin.com\"\n","KUCOIN_CANDLES = KUCOIN_REST_API+ \"/api/v1/market/candles\"\n","do_downloads = False\n","load_models = False\n","train_models = True\n","save_models = True"],"metadata":{"id":"ZrV1h2CDh96o"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Load and Train Models"],"metadata":{"id":"ZZxsWZH_d2lw"}},{"cell_type":"markdown","source":["## Load or Build Models"],"metadata":{"id":"xipp5qPv9mOv"}},{"cell_type":"code","source":["if load_models:\n","  load_all_models()\n","else:\n","  build_and_stash_all_config_models()"],"metadata":{"id":"-Dmgnrk4aJKH"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Train Models"],"metadata":{"id":"U8mAT5Ks9j4k"}},{"cell_type":"code","source":["histories = {}\n","training_filter = model_config[\"training_filter\"]\n","tickers_df = pd.read_csv(data_path +'/training_tickers.csv')\n","total = len(tickers_df)\n","mvt = \"4\"\n","if train_models:\n","  for name in model_config[\"day_bar_models\"]:\n","    if (len(training_filter)!=0 and not name in training_filter):\n","      print(\"skipping: \", name)\n","      continue\n","    \n","    print(\"training: \", name)\n","    count = 0\n","    \n","    for ticker in tickers_df.iloc[:, 0]:\n","      print(\"training: \", name, \" ticker: \", ticker, \" count:\", count, \"of:\", total)\n","      count+=1\n","      try:\n","        tickerObj = yf.download(tickers = ticker, interval = \"1d\")\n","        df = pd.DataFrame(tickerObj)\n","        df = df.reset_index()\n","      \n","        if len(df) > 0:\n","          history = train_config_model_against_df(name, model_config, df)\n","          if not name in histories:\n","            histories[name] = []\n","          histories[name].append(history)\n","      except Exception as inst:\n","        #raise inst\n","        print(\"Error: \", inst)\n","    if save_models:\n","      print(\"saving:\", name)\n","      if name in model_config[\"load_type\"] and model_config[\"load_type\"][name] == \"joblib\":\n","        joblib.dump(models[name], model_path + \"/\" + name  + \"-\" + mvt + \".joblib\") \n","      else:\n","        models[name].save(model_path + \"/\" + name  + \"-\" + mvt + \".h15\")"],"metadata":{"id":"_ZE-Rhd89jes"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(\"DONE\""],"metadata":{"id":"VNuKTXqt_raP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import psutil\n","ram = psutil.virtual_memory()\n","print(ram.total / (1024.0 ** 2))"],"metadata":{"id":"gda5KQFIeI7x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!cat /proc/meminfo\n"],"metadata":{"id":"oI_Yho8uBvNS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Test Download Latest Data"],"metadata":{"id":"VY5cnK3dQCEG"}},{"cell_type":"code","source":["if False:\n","  # minute bars\n","  for ticker in tickers:\n","      tickerObj = yf.download(tickers = ticker, interval = \"15m\", start=delta60, end=today)\n","      df = pd.DataFrame(tickerObj)\n","      with open(data_path + \"/\" + ticker + \"-15.csv\", 'w', encoding = 'utf-8-sig') as f:\n","        df.to_csv(f)"],"metadata":{"id":"z4mApput1KfD"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aL7yT2NByXZa"},"outputs":[],"source":["if False:\n","  # day bars\n","  for ticker in tickers:\n","      tickerObj = yf.download(tickers = ticker, interval = \"1d\")\n","      df = pd.DataFrame(tickerObj)\n","      with open(data_path + \"/\" + ticker + \".csv\", 'w', encoding = 'utf-8-sig') as f:\n","        df.to_csv(f)\n","\n","\n"]},{"cell_type":"code","source":["if False:\n","  #download coins\n","  now = int(time.time())\n","  start_time = now - (365 * 24 * 60 * 60) *3 # seconds in a year *. 3 years\n","  end_time = now\n","  interval = \"1day\"\n","  # Fetch the klines\n","  for coin in coins:\n","    klines = fetch_klines(coin, interval, start_time, end_time)\n","    df_history = pd.DataFrame(klines[\"data\"])\n","    df_history.columns = ['time','open','close','high','low','volume', 'amount']\n","    df_history['time'] = [datetime.fromtimestamp(int(x)) for x in df_history['time']]\n","    df_history['open'] = [float(x) for x in df_history['open']]\n","    df_history['close'] = [float(x) for x in df_history['close']]\n","    df_history['high'] = [float(x) for x in df_history['high']]\n","    df_history['low'] = [float(x) for x in df_history['low']]\n","    df_history['volume'] = [float(x) for x in df_history['volume']]\n","    df_history = df_history.rename(columns={\"time\":\"Date\", \"open\":\"Open\", \"close\":\"Close\", \"high\":\"High\", \"low\":\"Low\", \"volume\": \"Volume\"})\n","    with open(data_path + \"/\" + coin + \".csv\", 'w', encoding = 'utf-8-sig') as f:\n","      df_history.to_csv(f)"],"metadata":{"id":"cF1HAgNGiG2v"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Understand Feature Importance"],"metadata":{"id":"-cU2IWI_QWVC"}},{"cell_type":"code","source":["if False:\n","  scores_list = []\n","  for ticker in tickers:\n","    df_raw = pd.read_csv(data_path +'/' + ticker + '.csv')\n","    df_final = attach_technicals(df_raw)\n","    target_df = append_price_dif(df_final)\n","    target_df = target_df.drop(columns=['Date'])\n","    scaled_features = scale_data(target_df)\n","    [scaled_features, X, y] = extract_training(scaled_features, len(target_df), len(target_df.columns)-1)\n","    xgbr = xgb.XGBRegressor()\n","    xgbr.fit(X, y)\n","    scores = xgbr.get_booster().get_score(importance_type='weight')\n","    scores_list.append(scores)\n","\n","  df_scores = pd.DataFrame(scores_list)\n","  df_scores = df_scores.fillna(0)\n","  df_final = attach_technicals(\"SPY\")\n","  df_final = df_final.drop(columns=['Date'])\n","  median_features = df_scores.median().sort_values(ascending=False)\n","  median_features\n","  columns = []\n","  for feature in median_features.head(10).index:\n","    number = int(feature[1:])\n","    columns.append(df_final.columns[number])\n","\n","  columns"],"metadata":{"id":"QQKCPyYzQZb2"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"private_outputs":true,"collapsed_sections":["VY5cnK3dQCEG","-cU2IWI_QWVC"],"machine_shape":"hm","authorship_tag":"ABX9TyO+AkpLkflOlD357UTvCGKg"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"premium"},"nbformat":4,"nbformat_minor":0}